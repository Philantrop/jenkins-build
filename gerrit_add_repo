source /srv/tomcat/bin/data

#USER=""
#REPOPATH=""
#GERRIT_SERVER=""

REPO_URI=$1
REPO_NAME=$2

if [[ -z ${REPO_URI} || -z ${REPO_NAME} ]]; then
    echo "$0 <REPO_URI> <REPO_NAME> <REPO_STATE (should be ACTIVE)> <REPO_OWNER (e. g. "Peter Pan")> <REPO_OWNER_EMAIL (IMPORTANT)>"
    exit 1
fi

case "${REPO_URI}" in
    *github*)
        HOSTER=github
    ;;
    *gitorious*)
        HOSTER=gitorious
    ;;
    *git.exherbo.org*)
        HOSTER=Exherbo
    ;;
    *thwitt.de*)
        HOSTER=thwitt
    ;;
    *shadowice.org*)
        HOSTER=thwitt
    ;;
    *)
        echo "Unknown hoster"
        exit 3
    ;;
esac

case "${REPO_URI}" in
    *git.exherbo.org/dev/*)
        REPLICATION_GROUP=dev
    ;;
    *git.exherbo.org/*)
        REPLICATION_GROUP=official
    ;;
    *github.com:Exherbo*)
        REPLICATION_GROUP=github
    ;;
    *)
        echo "Will generate a new replication group"
    ;;
esac

# ACTIVE: project is regular and is the default value.
# READ_ONLY: users can see the project if read permission is granted, but all modification operations are disabled.
# HIDDEN: the project is not visible for those who are not owners

if [[ -z $3 ]]; then
    REPO_STATE="ACTIVE"
else
    REPO_STATE=$3
fi

if [[ -n $4 && -n $5 ]]; then
    REPO_OWNER=$4
    REPO_OWNER_EMAIL=$5
fi

cd "${REPOPATH}"

git clone --bare "${REPO_URI}" "${REPO_NAME}".git

if [[ ! -d ${REPOPATH}/${REPO_NAME}.git ]]; then
    echo "cloning failed"
    exit 2
fi

sudo chown -R ${USER}:${GROUP} "${REPO_NAME}.git"
sudo chmod -R a+rwx "${REPO_NAME}.git"

ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit flush-caches --cache project_list
ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit set-project --submit-type REBASE_IF_NECESSARY --ps "${REPO_STATE}"  "${REPO_NAME}"
ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit flush-caches --cache project_list

git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
git config branch.master.remote origin
git config branch.master.merge "refs/heads/master"

if [[ -z ${REPO_OWNER} ]]; then
    pushd /tmp

    if [[ ! $(ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-projects | grep "^${REPO_NAME}$") ]]; then
        echo "repo not on Gerrit yet"
        sleep 1
        ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit flush-caches --cache project_list
        sleep 1
    fi

    if [[ ! $(ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-projects | grep "^${REPO_NAME}$") ]]; then
        echo "I FAILED"
        exit 10
    fi

    git clone "${GERRIT_SERVER}"/"${REPO_NAME}" "${REPO_NAME}"
    cd "${REPO_NAME}"
    git fetch origin +refs/meta/*:refs/remotes/origin/*
    git checkout -b config --track origin/config

cat <<EOF > project.config
[submit]
        action = rebase if necessary
[access "refs/heads/*"]
        read = group Exherbo-${REPLICATION_GROUP}-replication
EOF

    ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-groups -v | awk '-F\t' '{printf ($2"\t"$1"\n")}' >>groups

# Old, since 2.9 half-broken method:
#    mysql -u ${MYSQL_USER} -p${MYSQL_PWD} ${MYSQL_DB} --skip-column-names -B -e "SELECT group_uuid, name FROM account_groups WHERE name in (\"Exherbo-${REPLICATION_GROUP}-replication\")" >>groups

    git add project.config groups
    git cm -m "Initial project config"
    git push origin HEAD:refs/meta/config

    cd /tmp

    rm -rf "${REPO_NAME}"

    popd

    sudo chown -R ${USER}:${GROUP} "${REPO_NAME}.git"
    sudo chmod -R a+rwx "${REPO_NAME}.git"

elif [[ -n ${REPO_OWNER} ]]; then

# WK: This is old. We use single-users now
#   ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit create-group \
#       --description "'For ownership of ${REPO_NAME}'" \
#       --member "${REPO_OWNER_EMAIL}" "'${REPO_OWNER}'"
# WK: This is old. We use single-users now

# This is still necessary because each replication group has its own replication URL.
    ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit create-group \
        --description "'Replication-only group for ${REPO_OWNER} repos on ${HOSTER}. Do not touch this, do not add anyone to it.'" \
        --member "philantrop@exherbo.org" "'Exherbo-${HOSTER}-${REPO_NAME}-replication'"

   pushd /tmp

    if [[ ! $(ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-projects | grep "^${REPO_NAME}$") ]]; then
        echo "repo not on Gerrit yet"
        sleep 1
        ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit flush-caches --cache project_list
        sleep 1
    fi

    if [[ ! $(ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-projects | grep "^${REPO_NAME}$") ]]; then
        echo "I FAILED"
        exit 10
    fi

    git clone "${GERRIT_SERVER}"/"${REPO_NAME}" "${REPO_NAME}"
    cd "${REPO_NAME}"
    git fetch origin +refs/meta/*:refs/remotes/origin/*
    git checkout -b config --track origin/config

# Example:

# file groups:
# UUID                                          Group Name
#
# 473749837df7f9b98798979879811d5db5c9ea3c        Exherbo-github-foo-replication
# user:Philantrop                                 user/Wulf C. Krueger (Philantrop)

# We need the UUID but with a slash as the delimiter. So, to play by the Gerrit
# rules, we do this:

# EMAIL="philantrop@exherbo.org"; echo "select distinct b.external_id from accounts as a left join account_external_ids as b on a.account_id=b.account_id where a.preferred_email='"${EMAIL}"' and b.external_id like 'username:%' order by a.account_id;" | ssh -x -p 29418 Philantrop@galileo.mailstation.de gerrit gsql --format=json_single | sed -e 's;.*\(user\)name:\(.*\)"}.*;\1/\2;'
# -> user/Philantrop


# WK: This is new. Test it!
REPO_OWNER_USERNAME=$(
echo "\
    select distinct b.external_id \
    from accounts as a \
    left join account_external_ids as b \
    on a.account_id=b.account_id \
    where a.preferred_email='"${REPO_OWNER_EMAIL}"' and \
    b.external_id like 'username:%' \
    order by a.account_id;" \
    | ssh -x -p ${PORT} ${SSH_USER}@${SERVER} gerrit gsql --format=json_single \
    | sed -e 's;.*\(user\)name:\(.*\)"}.*;\1/\2;'
)

cat <<EOF > project.config
[submit]
        action = rebase if necessary
[access "refs/heads/*"]
        owner = group ${REPO_OWNER_USERNAME}
        read = group Exherbo-${HOSTER}-${REPO_NAME}-replication
        read = group ${REPO_OWNER_USERNAME}
        abandon = group ${REPO_OWNER_USERNAME}
        create = group ${REPO_OWNER_USERNAME}
        forgeAuthor = group ${REPO_OWNER_USERNAME}
        forgeCommitter = group ${REPO_OWNER_USERNAME}
        forgeServerAsCommitter = group ${REPO_OWNER_USERNAME}
        push = group ${REPO_OWNER_USERNAME}
        pushMerge = group ${REPO_OWNER_USERNAME}
        pushTag = group ${REPO_OWNER_USERNAME}
        pushSignedTag = group ${REPO_OWNER_USERNAME}
        label-Code-Review = -2..+2 group ${REPO_OWNER_USERNAME}
        labelAs-Code-Review = -2..+2 group ${REPO_OWNER_USERNAME}
        rebase = group ${REPO_OWNER_USERNAME}
        removeReviewer = group ${REPO_OWNER_USERNAME}
        submit = group ${REPO_OWNER_USERNAME}
        viewDrafts = group ${REPO_OWNER_USERNAME}
        editTopicName = group ${REPO_OWNER_USERNAME}
        deleteDrafts = group ${REPO_OWNER_USERNAME}
        publishDrafts = group ${REPO_OWNER_USERNAME}
EOF

#for REAL groups:
#echo "SELECT group_uuid, name FROM account_groups;" | ssh -x -p 29418 Philantrop@galileo.mailstation.de gerrit gsql

# WK: This is old. We use single-users now
#   ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-groups -v | awk '-F\t' '{printf ($2"\t"$1"\n")}' >>groups
# WK: This is old. We use single-users now


# This is what we will create as the "groups" file:
#
# UUID                                          Group Name
#
# user:Philantrop                               user/Philantrop

# The "Group Name" field in reality looks like this: user/Wulf C. Krueger (Philantrop)
# user/${REPO_OWNER_USERNAME} works, though, and so we'll use that as we have no
# reliable method to fetch the real name.

# First, let's add all real group. Just to be sure.
    ssh -p ${PORT} ${SSH_USER}@${SERVER} gerrit ls-groups -v | awk '-F\t' '{printf ($2"\t"$1"\n")}' >>groups

    echo -e "${REPO_OWNER_USERNAME/\//:}\t${REPO_OWNER_USERNAME}" >> groups

# WK: This is new. Test it!

    git add project.config groups
    git cm -m "Initial project config"
    git push origin HEAD:refs/meta/config

    cd /tmp

    rm -rf "${REPO_NAME}"

    popd

    sudo chown -R ${USER}:${GROUP} "${REPO_NAME}.git"
    sudo chmod -R a+rwx "${REPO_NAME}.git"

    pushd /var/cache/tomcat/gerrit/etc

    cat <<EOF > /tmp/replication.config
# -----FIX THE URL LINE BELOW AND DELETE THIS LINE ------------
[remote "Exherbo-${HOSTER}-${REPO_NAME}"]
  url = git@${HOSTER}.com:${REPO_NAME}/\${name}-exheres.git
  push = refs/heads/*:refs/heads/*
  timeout = 15
  replicationDelay = 0
  replicatePermissions = false
  createMissingRepositories = false
  threads = 4
  authGroup = Exherbo-${HOSTER}-${REPO_NAME}-replication
# -----FIX THE URL LINE ABOVE AND DELETE THIS LINE ------------

EOF

    sudo cat /tmp/replication.config >>replication.config
    sudo emacs -nw replication.config

    # CAREFUL! The hostname in the next line MUST be "localhost"!
    # (Not really anymore but still...)
    ssh -p ${PORT} ${SSH_USER}@localhost gerrit plugin reload replication

    rm /tmp/replication.config
fi


# Add Jenkins task

rm -rf /tmp/jenkins
mkdir /tmp/jenkins
pushd /tmp/jenkins
wget https://${SERVER}/jenkins/jnlpJars/jenkins-cli.jar


# Test if this is an exheres repository
if [[ $(git ls-tree -r --name-only master profiles/repo_name) ]]; then
    # The "philantrop" in the next line refers to the repository, not my nick. :-)
    java -jar jenkins-cli.jar -i ~/.ssh/id_dsa -s https://${SERVER}/jenkins/ copy-job philantrop ${REPO_NAME}
else
    java -jar jenkins-cli.jar -i ~/.ssh/id_dsa -s https://${SERVER}/jenkins/ copy-job exheres-syntax ${REPO_NAME}
fi

java -jar jenkins-cli.jar -s https://${SERVER}/jenkins/ get-job ${REPO_NAME} > ${REPO_NAME}.xml
sed -i -e "s:philantrop:${REPO_NAME}:g" ${REPO_NAME}.xml
java -jar jenkins-cli.jar -i ~/.ssh/id_dsa -s https://${SERVER}/jenkins/ update-job ${REPO_NAME} < ${REPO_NAME}.xml
java -jar jenkins-cli.jar -s https://${SERVER}/jenkins/ build ${REPO_NAME}

popd

rm -rf /tmp/jenkins

# Test if this is an exheres repository
if [[ $(git ls-tree -r --name-only master profiles/repo_name) ]]; then
    sudo systemd-nspawn --bind=/srv/www/localhost/htdocs/pbin:/var/db/paludis/repositories/pbin --bind-ro=/home/jenkins/workspace:/var/db/paludis/gerrit -D /srv/jenkins/amd64_base/amd64 /bin/bash -c "
    chgrp tty /dev/tty
    source /etc/profile

    ln -sf /etc/paludis/repositories/philantrop.bash /etc/paludis/repositories/${REPO_NAME}.bash
"

    # systemd-nspawn >= 217 doesn't like it if the target directory of a bind mount already exists
    sudo rm -rf /srv/jenkins/amd64_base/amd64/var/db/paludis/repositories/pbin /srv/jenkins/amd64_base/amd64/var/db/paludis/gerrit

    # keep -E :jenkins-pbins on / updated
    sudo ln -sf philantrop.bash /etc/paludis-jenkins-pbins/repositories/${REPO_NAME}.bash
fi

